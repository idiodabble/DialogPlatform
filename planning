s - What city would you like to depart from?
u - San Diego
u - I'd like to depart from San Diego
u - I'd like to depart from San Diego and arrive in Atlanta
u - I'd like to depart from San Diego to Atlanta
u - San Diego to Atlanta
u - to Atlanta, from San Diego
u - I'd like arrive in Atlanta, from San Diego

u - San Diego is where I'd like to depart from
# doesn't fit a regex but we should still pick it up 'cause it's a city
u - I'm going to Atlanta # have to recognize it
# it's a city, but a different slot

u - I'm departing from San Diego and departing from Atlanta
# expecting one but received two, what to do?

s - What day and time would you like to leave?
u - Sunday
u - 1:00 pm
u - Sunday, 1:00 pm
u - Sunday at 1:00 pm

variable: depart_city, arrival_city
phrases:
to | arrive (in | at) #{arrival_city}
#{arrival_city} blah
from #{depart_city}
etc
synonyms?

also, what about varaible size info?
s - What are your favorite colors?
u - blue and red
u - blue, red, green

Variable
> values: list of possible values
> max_instances: number of values a user can have for this variable, default 1
> ?extract from utterance?
    default implementation is just a search for regex matches, but should be overwritable

will also have a
> response from user, list < word, probability > and the values selected

could also have a "none of the above" value distinct from clarification ("please answer the question" distinct from "did you say san diego?")

branching based on variable?
s - What would you like to do?
u - Book a flight 

could make nextPrompt a method overwritable with some code for the branching, OR
could have an associated nextPrompt for every variable value, and have them be same by default
but how to handle multiple variables?
nah, should just be coded: if blue and green then blah, else blah...

is a slot an instantiation of an object, or a subclass of a class?

departure = Slot.new
departure.set_next_prompt = arrival # set_next_prompt returned by next_prompt
# or this is just done in Slot.new(...)
OR overwrite next_prompt
def departure.next_prompt
    if departure.response = blah
        return blah
    else
        return blah
    end
end

MAYBE???
a slot can have multiple variables, a chain can have multiple slots

OR???
a slot can contain other slots...

s - When would you like to fly?
> contains month, day, and time slots, and next-prompt is "Which airline?"
u - June 14th
> time slot left, go to it
s - What time of day would you like to fly?
u - afternoon
> now bubble back up
s - Which airline?

if it has multiple slots left to fill, it will go in order of the array
also allow grounding for moving between levels of slot nesting?

    problems with this?

slot_one.run = Slot.new(...)
# and more declarations

while(true) do
    slot_one.run
    # do stuff based on results
    slot_two.run
    # so on

this way has no next_prompt, you just write it out here

how to handle jumping? out of web from places you can jump out of to places you can jump into, just make uniform?
I think it's reasonable. in new(...) say if you allow jump in/out, and if they want something more particular than can just code it themselves
will need a global hash of slots to be able to handle jumping
pr of jumping < pr of normally entering that slot

I think I have what I need to start!
remember: name, values (+pr), max_instances, extract (default: regex matching), inner slots, groundings (+pr), repeat/clarification (+pr), jump pr, too-many-instances response
values can have responses, i.e. u-blue, s-I like blue too! (useful for NOTA value)

how to determine what to do: instead of fully probablistic, just do first most expected thing past threshold likelihood
> was prompt answered?
if not past threshold, then:
> was prompt partially answered?
> were different slots filled?
> did he want to go back?
> did he want to go elsewhere?

grounding:
#{value} was registered for the #{name}
#{value}, okay | alright | sure | cool
okay | alright | sure | cool
(nothing)

indicators that system was mistaken:
> "I said"
> similarity to previous utterance


SIMILARITY FUNCTION
default: edit distance
we should ask "did you mean san fransisco?" if they type "sand fransisco"
also, increase probability of anything similar, like "san" increase "san diego" and "san fransisco"


JUMPING
jump_into_here_likelihood = #, can be 0
jump_outta_here_likelihood = #, can be 0
jump function: likelihood of jumping towards siblings, parent, cousins, grandparent, 2nd cousins... etc

anything more specific than those they can add themselves

by default, anyone in a slot group can jump to anyone else, but you can't get inside one of them from outside the group

Important:
if jumping around, have to send user to remaining spots and not repeat anything
so, need to maintain a list of slots that need to be filled. And there could be slot dependencies: A must be filled before B, so you can't jump to anything later than B

priority of next_slot: first, specific value's next_slot, then it's the overall next_slot for Slot or remaining stuff for Multislot

both are slot groups, important because you need to fill them out all-or-nothing (they all get added to priority list)
difference is whether it has simultaneous question/responses or not
also, need to save filled slots for a group in case they jump away and then later come back to it

maybe: slot group is higher level structure above slots and simultaneous slots

need to know what you're asking for currently in case of overlapping values (destination + departure)
...welp, can only fill in what's in the slot group

also, there's a difference between
s - When are you flying?
u - the 18th
s - You have yet to give us a year, month or time of day
u - this year, June
s - You have yet to give us a time of day
and what I was originally planning with slot groups:
s - When are you flying?
u - the 18th
s - What year are you flying?
u - this year
s- What month are you flying?

screw the latter. First should be doable, basically recursive after first step

question: how to handle conditionally existing slots?
maybe seat class slot only happens if airline is delta; what if you skip the airline question and come back to it? what if you choose SW and then later change to delta? Or choose delta then change to SW?
the condition check has to happen at the beginning of the slot and if false, not do anything

condition that must be true for variable to get filled versus
condition that must be true for variable to need filling

one way to do it: have a single precondition, always check it, but only not do it if it's the last thing to do and you still can't

dependcy example: seating class must be filled before seat number

ALSO: let value for a variable be any number

could have a reset_likelihoods to set back to initial values

ALSO: keep looking for slots that have already been filled, just in case we got it wrong (unless you grounded it... but if you do clarify it, have to allow changes)

also: making wrappers for every method might be good for users doing overwriting, easier than having to alias everything they want to conditionally keep. Ex:
def run
    d_run
end
(d stands for default)


allow user to decide whether to do too_many_response or to just take highest rated options

Slot Group can require that all slots be filled out or not


other grounding:
And, question?

need to be able to go back on "No I wanted San Diego" for departure when moved on to arrival

should be able to say:
"Sorry, there are no flights for 8:00 am. However, there are flights for 7:00 am and 9:00 am."

also there's the case of
"Actually, I want to change my destination to San Diego" after already moved on to time
has to recognize change of slot AND value for that slot
(also, decrease likelihood of original choice when going back to a slot)
